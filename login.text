// "use server";

// import { signIn } from "@/auth";
// import { generateTwoFactorToken, getTwoFactorTokenByEmail } from "@/data/tokens";
// import { getTwoFactorConfirmationByUserId } from "@/data/two-factor-confirmation";
// import { getUserByEmail } from "@/data/user";
// import { generateVerificationToken } from "@/data/verification";
// import { sendTwoFactorTokenByEmail, sendVerificationEmail } from "@/lib/mail";
// import { prisma } from "@/lib/prisma";
// import { DEFAULT_LOGIN_REDIRECT } from "@/lib/routes";
// import { LoginSchema } from "@/schemas";
// import { AuthError } from "next-auth";
// import { z } from "zod";

// export const loginWithValues = async (values: z.infer<typeof LoginSchema>, callbackUrl?: string | null) => {
//     try {
//         const validatedFields = LoginSchema.safeParse(values);
//         if(!validatedFields.success) {
//             return {
//                 error: "Invalid fields"
//             }
//         }


//         const { password, email, code } = validatedFields.data;
        

//         const existingUser = await getUserByEmail(email);


//         if(!existingUser || !existingUser.email ) {
//             return {
//                 error: "Email does not exist"
//             }
//         };


//         if(!existingUser.emailVerified) {

//             // generate verification token

//             const verificationToken = await generateVerificationToken(existingUser.email);

//             // send verification email

//             await sendVerificationEmail(verificationToken?.email as string, verificationToken?.token as string);


//             return {
//                 success: "Confirmation email sent!"
//             }


//         };




//         if(existingUser.isTwoFactorEnabled && existingUser.email) {

//             if(code ) {
//                 console.log('code', code);
//                 // if a token is already available
//                 const twoFactorToken = await getTwoFactorTokenByEmail(existingUser.email);
//                 console.log("twoFactorToken", twoFactorToken);

//                 if(!twoFactorToken) {
//                     return {
//                         error: "Invalid code"
//                     }
//                 }

//                 // if code has already expired

//                 const hasExpired = new Date(twoFactorToken.expires) < new Date();
//                 console.log(hasExpired)

//                 if(hasExpired) {
//                     return {
//                         error: "Code expired"
//                     }
//                 }

//                 // // delete the two factor token if its there
//                 await prisma.twoFactorToken.delete({

//                     where: {
//                         id: twoFactorToken.id
//                     }

//                 });


//                 const existingConfirmation = await getTwoFactorConfirmationByUserId(existingUser.id);
//                 console.log("existingConfirmation", existingConfirmation);

//                 if(existingConfirmation) {
//                     // delete existing confirmation
//                     await prisma.twoFactorConfirmation.delete({

//                         where: {
//                             id: existingConfirmation.id
//                         }

//                     });  
//                 }

//                 // create a new confirmation
//                 const createdConfirmation = await prisma.twoFactorConfirmation.create({
//                     data: {
//                         userId: existingUser.id,

//                     }
//                 });


//             } else {
//                 // generate another two factor token code

//                 const twoFactorToken = await generateTwoFactorToken(existingUser.email);
//                 await sendTwoFactorTokenByEmail(twoFactorToken?.email as string, twoFactorToken?.token as string)
//                 // because its already two factor token, no need to update user
//                 return { twoFactor: true }



//             }


//         } else {

//             const twoFactorToken = await generateTwoFactorToken(existingUser.email);

//             await sendTwoFactorTokenByEmail(twoFactorToken?.email as string, twoFactorToken?.token as string)

//             // update user

//             await prisma.user.update({
//                 where: {
//                     id: existingUser.id
//                 },
//                 data: {
//                     isTwoFactorEnabled: true
//                 }
//             });


//             return { twoFactor: true };

//         }


//         try {

//             await signIn('credentials', {
//                 email,
//                 password,
//                 redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT
//             })
            
//         } catch (error) {
//             if (error instanceof AuthError) {
//                 switch (error.type) {
//                   case "CredentialsSignin":
//                     return { error: "Invalid credentials!" }
//                   default:
//                     return { error: "Something went wrong!" }
//                 }
//               }
          
//               throw error;
            
//         }

        
        
//     } catch (error) {
//         console.log("Error logging in", error);
//         return {
//             error: "Something went wrong"
        
//         }

        
//     }

// }



